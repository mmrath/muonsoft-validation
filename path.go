package validation

import (
	"encoding/json"
	"fmt"
	"strconv"
	"strings"
)

// PropertyPathElement is a part of the PropertyPath.
type PropertyPathElement interface {
	// IsIndex can be used to determine whether an element is a string (property name) or
	// an index array.
	IsIndex() bool
	fmt.Stringer
}

// PropertyNameElement holds up property name value under PropertyPath.
type PropertyNameElement string

// IsIndex on PropertyNameElement always returns false.
func (p PropertyNameElement) IsIndex() bool {
	return false
}

// String returns property name as is.
func (p PropertyNameElement) String() string {
	return string(p)
}

// ArrayIndexElement holds up array index value under PropertyPath.
type ArrayIndexElement int

// IsIndex on ArrayIndexElement always returns true.
func (a ArrayIndexElement) IsIndex() bool {
	return true
}

// String returns array index values converted into a string.
func (a ArrayIndexElement) String() string {
	return strconv.Itoa(int(a))
}

// PropertyPath is generated by the validator and indicates how it reached the invalid value
// from the root element. Property path is denoted by dots, while array access
// is denoted by square brackets. For example, "book.keywords[0]" means that the violation
// occurred on the first element of array "keywords" in the "book" object.
type PropertyPath []PropertyPathElement

// String is used to format property path to a string.
func (path PropertyPath) String() string {
	var s strings.Builder

	for i, element := range path {
		if i > 0 && !element.IsIndex() {
			s.WriteString(".")
		}
		if element.IsIndex() {
			s.WriteString("[" + element.String() + "]")
		} else {
			s.WriteString(element.String())
		}
	}

	return s.String()
}

// MarshalJSON will marshal property path value to a JSON string.
func (path PropertyPath) MarshalJSON() ([]byte, error) {
	return json.Marshal(path.String())
}
