package validation

import (
	"encoding/json"
	"fmt"
	"strconv"
)

// PropertyPathElement is a part of the PropertyPath.
type PropertyPathElement interface {
	// IsIndex can be used to determine whether an element is a string (property name) or
	// an index array.
	IsIndex() bool
	fmt.Stringer
}

// PropertyNameElement holds up property name value under PropertyPath.
type PropertyNameElement string

// IsIndex on PropertyNameElement always returns false.
func (p PropertyNameElement) IsIndex() bool {
	return false
}

// String returns property name as is.
func (p PropertyNameElement) String() string {
	return string(p)
}

// ArrayIndexElement holds up array index value under PropertyPath.
type ArrayIndexElement int

// IsIndex on ArrayIndexElement always returns true.
func (a ArrayIndexElement) IsIndex() bool {
	return true
}

// String returns array index values converted into a string.
func (a ArrayIndexElement) String() string {
	return strconv.Itoa(int(a))
}

// PropertyPath is generated by the validator and indicates how it reached the invalid value
// from the root element. Property path is denoted by dots, while array access
// is denoted by square brackets. For example, "book.keywords[0]" means that the violation
// occurred on the first element of array "keywords" in the "book" object.
//
// Internally PropertyPath is a linked list. You can create a new path using WithProperty
// or WithIndex methods. PropertyPath should always be used as a pointer value.
// Nil value is a valid value that means that the property path is empty.
type PropertyPath struct {
	parent *PropertyPath
	value  PropertyPathElement
}

// NewPropertyPath creates a PropertyPath from the list of elements. If the list is empty nil will be returned.
// Nil value is a valid value that means that the property path is empty.
func NewPropertyPath(elements ...PropertyPathElement) *PropertyPath {
	var path *PropertyPath

	return path.With(elements...)
}

// With returns new PropertyPath with appended elements to the end of the list.
func (path *PropertyPath) With(elements ...PropertyPathElement) *PropertyPath {
	current := path
	for _, element := range elements {
		current = &PropertyPath{parent: current, value: element}
	}

	return current
}

// WithProperty returns new PropertyPath with appended PropertyNameElement to the end of the list.
func (path *PropertyPath) WithProperty(name string) *PropertyPath {
	return &PropertyPath{
		parent: path,
		value:  PropertyNameElement(name),
	}
}

// WithIndex returns new PropertyPath with appended ArrayIndexElement to the end of the list.
func (path *PropertyPath) WithIndex(index int) *PropertyPath {
	return &PropertyPath{
		parent: path,
		value:  ArrayIndexElement(index),
	}
}

// String is used to format property path to a string.
func (path *PropertyPath) String() string {
	s := ""
	element := path
	for element != nil {
		if element.value.IsIndex() {
			s = "[" + element.value.String() + "]" + s
		} else {
			s = element.value.String() + s
			if element.parent != nil {
				s = "." + s
			}
		}
		element = element.parent
	}

	return s
}

// MarshalJSON will marshal property path value to a JSON string.
func (path *PropertyPath) MarshalJSON() ([]byte, error) {
	return json.Marshal(path.String())
}
